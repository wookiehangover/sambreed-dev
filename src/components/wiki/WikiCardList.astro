---
import type { CollectionEntry } from "astro:content";
import type { WikiCategory } from "~/types/wiki";
import CategoryList from "./CategoryList.astro";
import Icon, { type IconName } from "~/components/Icon.astro";
import WikiSection from "./WikiSection.astro";

type WikiEntry = CollectionEntry<"wiki">;

export interface Props {
	entries: WikiEntry[];
	map: Map<string, WikiCategory>;
}

const sort = Astro.url.searchParams.get("sort");

const { entries, map } = Astro.props;

const groups = entries.reduce((acc, entry) => {
	if (acc.has(entry.data.type)) {
		acc.get(entry.data.type)?.push(entry);
	} else {
		acc.set(entry.data.type, [entry]);
	}
	return acc;
}, new Map<WikiEntry["data"]["type"], WikiEntry[]>());

const COPY: Record<WikiEntry["data"]["type"], { title: string; description: string }> = {
	note: {
		title: "Notes",
		description:
			"Notes are where wiki entries start. They are as simple as a few lines of text and a title. They might be expanded into a full article later, or just be left small.",
	},
	quote: {
		title: "Quotes",
		description:
			"Sometimes, someone else has said it better than you ever could. Quotes are wiki entries that capture those ideas.",
	},
	list: {
		title: "Lists",
		description:
			"Text without heirarchy is just a blob. Lists are wiki entries that capture a collection of ideas, and their relationships to each other.",
	},
	book: {
		title: "Books",
		description:
			"Some people have a dedicated page for /books, but having a little wiki, I figured I'd just put them here.",
	},
	essay: {
		title: "Essays",
		description:
			"Once a note has gone through a couple of drafts, it might be expanded into an essay. Consider these the ideas that I have spent significant time thinking about.",
	},
};
---

<section>
	<header>
		<form id="sort-form">
			<button name="sort" value="category" disabled={sort === "category" || sort == null}>
				<Icon name="table-view" title="Show categories" />
			</button>
			<button name="sort" value="all" disabled={sort === "all"}>
				<Icon name="list" title="Show all" />
			</button>
		</form>
	</header>
</section>

{
	sort === "all" ? (
		<WikiSection
			icon="note"
			title="Wiki"
			description={`All ${entries.length} entries, sorted by most recent first.`}
			entries={entries.sort((a, b) => new Date(b.data.createdAt).valueOf() - new Date(a.data.createdAt).valueOf())}
			map={map}
		/>
	) : (
		<>
			{Array.from(groups.entries()).map(([group, entries]) => (
				<WikiSection
					icon={group as IconName}
					title={COPY[group].title}
					description={COPY[group].description}
					entries={entries}
					map={map}
				/>
			))}
		</>
	)
}

<style>
	@supports (anchor-name: --main-header) {
		@media (min-width: 512px) {
			section > header > form {
				position: absolute;
				position-anchor: --main-header;
				left: calc(anchor(end) + 2rem);
				top: anchor(50%);
			}
		}
	}

	section > header {
		padding-top: 0;
		padding-bottom: 0;
	}

	form {
		padding: 0;
		margin: 0;
		display: flex;
		gap: 0.5rem;
	}

	form button {
		color: var(--bold-color);
		border: none;
		background: transparent;
		padding: 0;
		margin: 0;
		opacity: 0.5;

		&:disabled {
			opacity: 1;
		}
	}
</style>

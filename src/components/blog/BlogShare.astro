---
export interface Props {
  title: string;
  slug: string;
  description?: string;
}

const { title, slug, description = "" } = Astro.props;

const link = `https://sambreed.dev/writing/${slug}`
---

<section>
  <header></header>
  <div>
    <reply-link aria-label={`Email a reply to ${title}`} data-title={title} data-link={link}>â†’ Reply</reply-link>
    <share-button data-title={title} data-link={link} data-desc={description}>
      <button aria-label={`Share ${title}`}>Share</button>
    </share-button>
  </div>
</section>

<style>
  div {
    display: flex;
    gap: 1rem;
    font-family: var(--font-family-heading);
    align-items: center;
  }

  button {
    background-color: transparent;
    border-width: 0;
    font-family: inherit;
    font-size: inherit;
    font-style: inherit;
    font-weight: inherit;
    line-height: inherit;
    padding: 0;
    color: var(--text-dim);
  }

  button:hover {
    cursor: pointer;
    text-decoration: underline;
    text-underline-offset: 2px;
    color: var(--text-color);
  }
</style>

<script>
  class ReplyLink extends HTMLElement {
    constructor() {
      super();
    }
    connectedCallback() {
      const { title, link } = this.dataset;
      if (!link) return;

      const shadow = this.attachShadow({ mode: "closed" });
      const subject = encodeURIComponent(`Re: ${title}`);
      const body = encodeURIComponent(`\n\nLink to: ${link}\n`)

      const style = document.createElement("style");
      style.textContent = `
        a {
          color: var(--text-dim);
          text-decoration: none;
        }
        a:hover {
          color: var(--text-color);
          text-decoration: underline;
          text-underline-offset: 2px;
        }
      `;

      const a = document.createElement("a");
      const label = `Email a reply to ${title}`
      a.setAttribute("title", label);
      a.setAttribute("aria-label", label);
      a.setAttribute("href", `mailto:samuel.breed@gmail.com?subject=${subject}&body=${body}`);
      a.innerHTML = "â†’ Reply";

      shadow.append(style, a)
    }
  }

  customElements.define("reply-link", ReplyLink);

  class ShareButton extends HTMLElement {
    constructor() {
      super();

      const { title, link, description } = this.dataset;
      if (!link) return;

      const $button = this.querySelector("button");
      if (!$button) return;

      $button.addEventListener("click", () => {
        if ("share" in navigator) {
          try {
            window.navigator.share({
              title,
              url: link,
              text: description,
            });
          } catch (error) {
            console.error(error);
          }
        } else if ("clipboard" in navigator) {
          try {
            window.navigator.clipboard.writeText(link);
            const text = $button.innerText;
            $button.innerText = "Copied link ðŸ“‹";
            setTimeout(() => {
              $button.innerText = text;
            }, 1000);
          } catch (error) {
            console.error(error);
          }
        }
      });
    }
  }

  customElements.define("share-button", ShareButton);
</script>

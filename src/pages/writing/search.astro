---
import { getCollection } from "astro:content";
import BaseHead from "~/components/BaseHead.astro";
import Footer from "~/components/Footer.astro";
import Header from "~/components/Header.astro";
import BlogCard from "~/components/search/BlogCard.astro";
import SearchForm from "~/components/search/SearchForm.astro";
import { getThemeClass } from "~/utils/get-theme-class";
const theme = Astro.cookies.get("dark");
const themeClass = getThemeClass(theme);
const query = Astro.url.searchParams.get("q");
const blogEntries = await getCollection("writing");

let results = null;

if (query) {
	const response = await fetch(`${Astro.url.origin}/api/search?q=${query}&type=blog`);
	const data = await response.json();
	results = data.map((entry: { slug: string }) => {
		return blogEntries.find((e) => e.id === entry.slug);
	});
}
---

<!doctype html>
<html lang="en" class={themeClass}>
    <head>
        <BaseHead title="Blog Search" description="Blog Search" />
    </head>
    <body>
        <Header />

        <section>
            <header>
                <h2>“Blog” Search</h2>
                <p>It's vibe-based</p>
            </header>
            <div>
                <SearchForm action="/writing/search" value={query ?? ""} />

                {
                    results && (
                        <ul>
                            {results.map((entry: any) => (
                                <BlogCard entry={entry} />
                            ))}
                        </ul>
                    )
                }
            </div>
        </section>

        <Footer />
    </body><style>
        body {
            display: flex;
            flex-direction: column;
        }

        section {
            flex-grow: 1;
        }

        form {
            display: flex;
            gap: 1rem;
            margin: 1rem 0 2rem;
        }

        input {
            flex-grow: 1;
            padding: 0.5rem;
            border: 1px solid var(--border-dim);
            border-radius: 4px;
            font-size: 1rem;
            line-height: 1.3;
            background: transparent;
            color: var(--text-color);
            outline: none;
        }

        button {
            background-color: var(--border-dim);
            color: var(--text-color);
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            font-size: 1rem;
            line-height: 1.3;
        }

        ul {
            display: grid;
            list-style: none;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin: 0;
            padding: 0;
        }

        @media (max-width: 512px) {
            ul {
                grid-template-columns: 1fr;
            }
        }
    </style>
</html>

---
import { getCollection } from "astro:content";
import BlogCard from "~/components/search/BlogCard.astro";
import WikiCard from "~/components/search/WikiCard.astro";
import getAllCategories from "~/utils/get-all-categories";
import SearchForm from "~/components/search/SearchForm.astro";
import BaseLayout from "~/layouts/Base.astro";
const wikiEntries = await getCollection("wiki");
const blogEntries = await getCollection("writing");
const { map } = getAllCategories(wikiEntries);

const query = Astro.url.searchParams.get("q");

let results = null;

if (query) {
	const response = await fetch(`${Astro.url.origin}/api/search?q=${query}&type=all`);
	const data = await response.json();

	results = data.flatMap((entry: { slug: string; type: string }) => {
		let { type } = entry;
		let content =
			type === "blog" ? blogEntries.find((e) => e.id === entry.slug) : wikiEntries.find((e) => e.id === entry.slug);

		if (!content) return [];

		return {
			type,
			...content,
		};
	});
}
---

<BaseLayout title="Search" description="Search">
	<section>
		<header>
			<h2>Search</h2>
			<p>It's vibe-based</p>
		</header>
		<div>
			<SearchForm value={query ?? ""} />

			{
				results && (
					<ul>
						{results.map((entry: any) =>
							entry.type === "blog" ? (
								<li>
									<BlogCard entry={entry} />
								</li>
							) : (
								<WikiCard entry={entry} map={map} />
							),
						)}
					</ul>
				)
			}
		</div>
	</section>
</BaseLayout>

<style>
	body {
		display: flex;
		flex-direction: column;
	}

	section {
		flex-grow: 1;
	}

	ul {
		display: grid;
		list-style: none;
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
		margin: 0;
		padding: 0;
	}

	@media (max-width: 512px) {
		ul {
			grid-template-columns: 1fr;
		}
	}
</style>

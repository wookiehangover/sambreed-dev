---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { getCollection } from "astro:content"

export interface Props {
	content: {
		title: string;
		description?: string;
		createdAt: Date;
		updatedAt?: Date;
		categories: string[]
		tags?: string[]
	};
}

const wikiEntries = await getCollection("wiki")

type WikiCategory = { label: string, children: WikiCategory[] }

// const categories = wikiEntries.reduce((acc, entry) => {
// 	for (const [index, category] of entry.data.categories.entries())	{

// 		const existingCategory = acc.find((c) => c.label === category)

// 		if (index === 0) {
// 			if (!existingCategory) {
// 				acc.push({ label: category, children: [] })
// 			}
// 		} else {
// 			const parentCategoryLabel = entry.data.categories[index - 1]
// 			if (parentCategoryLabel) {
// 				const parentCategory = acc.find((c) => c.label === parentCategoryLabel)
// 				if (parentCategory) {
// 					parentCategory.children.push({ label: category, children: [] })
// 				} else {
// 					acc.push({ label: parentCategoryLabel, children: [{ label: category, children: [] }] })
// 				}
// 			}
// 		}
// 	}

// 	return acc
// }, [] as WikiCategory[])

console.log(categories)

const {
	content: { title, description, createdAt, updatedAt },
} = Astro.props;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description ?? `Wiki Entry for ${title}`} />
		<style>
			.title {
				font-size: 2em;
				margin: 0.25em 0 0;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<h1 class="title">{title}</h1>
				{createdAt && <time>{createdAt.toLocaleDateString()}</time>}
				{
					updatedAt && (
						<div>
							Last updated on <time>{updatedAt.toLocaleDateString()}</time>
						</div>
					)
				}
				<hr />
				<slot />
			</article>
		</main>
		<Footer />
	</body>
</html>

<script>
	// external links should open in a new tab
	document.addEventListener("DOMContentLoaded", function() {
		const links = document.querySelectorAll("a");
	
		links.forEach((link) => {
			const href = link.getAttribute("href");
			const isExternal = href?.startsWith("http") && !location.hostname.includes(href);
	
			if (isExternal) {
				link.setAttribute("target", "_blank");
				link.setAttribute("rel", "noopener noreferrer");
			}
		});
	});
	</script>
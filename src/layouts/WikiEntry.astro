---
import BaseHead from "~/components/BaseHead.astro";
import Header from "~/components/Header.astro";
import Footer from "~/components/Footer.astro";
import { getCollection } from "astro:content";
import getAllCategories from "~/utils/get-all-categories";
import CategoryList from "~/components/wiki/CategoryList.astro";
import type { IconName } from "~/components/Icon.astro";
import WikiCategoryList from "~/components/wiki/WikiCategoryList.astro";
import "../components/CodeBlock.astro";
import { getThemeClass } from "~/utils/get-theme-class";
const theme = Astro.cookies.get("dark");
const themeClass = getThemeClass(theme);

export interface Props {
	content: {
		title: string;
		description?: string;
		createdAt?: Date;
		updatedAt?: Date;
		categories?: string[];
		tags?: string[];
		all_categories?: string[];
		type?: IconName;
	};
	size?: "prose" | "full";
}

const wikiEntries = await getCollection("wiki");
const { tree, map } = getAllCategories(wikiEntries);

const {
	size,
	content: { title, description, createdAt, updatedAt, categories, type },
} = Astro.props;
---

<!doctype html>
<html lang="en" class={themeClass}>
	<head>
		<BaseHead title={`${title} - Wiki`} description={description ?? `Wiki Entry for ${title}`} />
	</head>

	<body>
		<Header label="wiki" />

		<section>
			<header>
				<div class="sidebar-header">
					<h1 class="title">{title}</h1>
					{description && <p class="pt-2">{description}</p>}
					<div class="pt-2">
						{
							createdAt && (
								<p class="text-dim">
									First posted on <time>{createdAt.toLocaleDateString()}</time>
								</p>
							)
						}
						{
							updatedAt && (
								<p class="text-dim">
									Last updated on <time>{updatedAt.toLocaleDateString()}</time>
								</p>
							)
						}
					</div>
					<nav class="text-xs flex flex-wrap gap-2 pt-2">
						<CategoryList categories={categories ?? []} map={map} />
					</nav>
				</div>
			</header>

			<article>
				<slot />
			</article>
		</section>

		<WikiCategoryList />

		<Footer />
	</body>
</html>

<script>
	document.addEventListener("astro:page-load", function ready() {
		const links = document.querySelectorAll("a");

		links.forEach((link) => {
			const href = link.getAttribute("href");
			const isExternal = href?.startsWith("http") && !location.hostname.includes(href);

			if (isExternal) {
				link.setAttribute("target", "_blank");
				link.setAttribute("rel", "noopener noreferrer");
			}
		});

		const toc = document.querySelector("#table-of-contents + ul");

		if (toc) {
			const rect = toc.getBoundingClientRect();
			// set --height css variable on toc
			(toc as HTMLElement).style.setProperty("--height", `${rect.height}px`);
		}

		// Table of contents highlighting and scroll progress
		const article = document.querySelector("article");
		if (toc && article) {
			// Get all headings with IDs in the article
			const headings = article.querySelectorAll("h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]");

			if (headings.length > 0) {
				// Create a map of heading IDs to their corresponding TOC links
				const tocLinks = new Map();
				toc.querySelectorAll("a[href^='#']").forEach((link) => {
					const id = link.getAttribute("href")?.substring(1);
					if (id) {
						tocLinks.set(id, link);
					}
				});

				// Set up intersection observer
				const observer = new IntersectionObserver(
					(entries) => {
						entries.forEach((entry) => {
							const id = entry.target.id;
							const tocLink = tocLinks.get(id);

							if (tocLink) {
								if (entry.isIntersecting) {
									// Remove active class from all TOC links
									tocLinks.forEach((link) => link.classList.remove("active"));
									// Add active class to current TOC link
									tocLink.classList.add("active");
								}
							}
						});
					},
					{
						rootMargin: "-20% 0px -70% 0px", // Trigger when heading is in the top 30% of viewport
						threshold: 0,
					},
				);

				// Observe all headings
				headings.forEach((heading) => observer.observe(heading));
			}

			// Scroll progress tracking
			function updateScrollProgress() {
				if (!article) return;

				const articleRect = article.getBoundingClientRect();
				const articleTop = articleRect.top + window.scrollY;
				const articleHeight = articleRect.height;
				const viewportHeight = window.innerHeight;
				const scrollTop = window.scrollY;

				// Calculate how much of the article has been scrolled past
				const articleStart = articleTop;
				const articleEnd = articleTop + articleHeight;
				const viewportTop = scrollTop;
				const viewportBottom = scrollTop + viewportHeight;

				let percentRead = 0;

				if (viewportTop >= articleEnd) {
					// Scrolled past the entire article
					percentRead = 100;
				} else if (viewportBottom >= articleStart) {
					// At least part of the article is visible
					const visibleStart = Math.max(viewportTop, articleStart);
					const readHeight = Math.max(0, visibleStart - articleStart);
					percentRead = Math.min(100, (readHeight / articleHeight) * 100);
				}

				// Set CSS variable on the TOC
				(toc as HTMLElement).style.setProperty("--percent-read", `${percentRead}%`);
			}

			// Initial calculation
			updateScrollProgress();

			// Update on scroll
			window.addEventListener("scroll", updateScrollProgress, { passive: true });
		}
	});
</script>

<style>
	.title {
		font-size: 1.825em;
		line-height: 1.2;
	}

	header > div {
		position: sticky;
		top: 0;
	}

	time {
		color: var(--text-color);
	}

	header:has(+ article > #table-of-contents) .sidebar-header {
		position: static;
	}
</style>

<style is:global>
	/* Generated Table of Contents */
	#table-of-contents {
		display: none;
	}

	#table-of-contents + ul {
		position: sticky;
		top: 1rem;
		transform: translateX(-200%);
		width: 15rem;
		font-size: 0.875rem;
		padding: 0;
		list-style: none;
		height: fit-content;
		margin-bottom: calc(var(--height, 0) * -1);

		& a {
			text-decoration: none;
			color: var(--text-dim);
			&:hover {
				text-decoration: underline;
			}
		}

		& a.active {
			color: var(--link-color);
			text-decoration: underline;
		}
	}

	#table-of-contents + ul:before {
		content: "Outline";
		color: var(--text-very-dim);
		border-bottom: 1px solid var(--border-dim);
		position: relative;
		display: block;
		margin-bottom: 0.5lh;
		width: 100%;
	}

	#table-of-contents + ul:after {
		content: "";
		border-bottom: 1px solid var(--bold-color);
		display: block;
		width: var(--percent-read, 0%);
		position: absolute;
		top: 1lh;
	}

	#table-of-contents + ul li > p {
		margin: 0;
	}

	#table-of-contents + ul > li > ul {
		padding-left: 1.5rem;
	}

	article {
		margin-top: 1rem;
	}

	@media (max-width: 1168px) or (max-height: 600px) {
		#table-of-contents + ul {
			position: static;
			width: auto;
			transform: none;
			margin-bottom: 1lh;

			& a.active {
				color: var(--text-dim);
			}
		}
	}
</style>
